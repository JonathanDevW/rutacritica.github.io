// Datos del proyecto
let tasks = [];
let criticalPath = [];
let projectDuration = 0;
let editingTaskId = null;
let timeUnit = "days";
let zoomLevel = 1.0;
let panOffset = { x: 0, y: 0 };
let isPanning = false;
let lastMousePosition = { x: 0, y: 0 };

// Elementos DOM
const taskNameInput = document.getElementById('task-name');
const taskDurationInput = document.getElementById('task-duration');
const dependenciesChecklist = document.getElementById('dependencies-checklist');
const addTaskBtn = document.getElementById('add-task');
const calculateBtn = document.getElementById('calculate-cpm');
const resetBtn = document.getElementById('reset-project');
const zoomInBtn = document.getElementById('zoom-in');
const zoomOutBtn = document.getElementById('zoom-out');
const resetViewBtn = document.getElementById('reset-view');
const timeUnitSelect = document.getElementById('time-unit');
const tasksBody = document.getElementById('tasks-body');
const criticalPathContainer = document.getElementById('critical-path');
const totalDurationEl = document.getElementById('total-duration');
const criticalTasksEl = document.getElementById('critical-tasks');
const nonCriticalTasksEl = document.getElementById('non-critical-tasks');
const minSlackEl = document.getElementById('min-slack');
const totalUnitEl = document.getElementById('total-unit');
const slackUnitEl = document.getElementById('slack-unit');
const durationConversionEl = document.getElementById('duration-conversion');
const canvas = document.getElementById('cpm-canvas');
const ctx = canvas.getContext('2d');

// Event Listeners
addTaskBtn.addEventListener('click', addTask);
calculateBtn.addEventListener('click', calculateCPM);
resetBtn.addEventListener('click', resetProject);
zoomInBtn.addEventListener('click', () => { zoomLevel *= 1.2; drawNetworkDiagram(); });
zoomOutBtn.addEventListener('click', () => { zoomLevel /= 1.2; drawNetworkDiagram(); });
resetViewBtn.addEventListener('click', () => { zoomLevel = 1.0; panOffset = { x: 0, y: 0 }; drawNetworkDiagram(); });
timeUnitSelect.addEventListener('change', updateTimeUnit);

// Eventos para desplazamiento del diagrama
canvas.addEventListener('mousedown', (e) => {
    isPanning = true;
    lastMousePosition = { x: e.clientX, y: e.clientY };
    canvas.style.cursor = 'grabbing';
});

canvas.addEventListener('mousemove', (e) => {
    if (isPanning) {
        panOffset.x += (e.clientX - lastMousePosition.x) / zoomLevel;
        panOffset.y += (e.clientY - lastMousePosition.y) / zoomLevel;
        lastMousePosition = { x: e.clientX, y: e.clientY };
        drawNetworkDiagram();
    }
});

canvas.addEventListener('mouseup', () => {
    isPanning = false;
    canvas.style.cursor = 'grab';
});

canvas.addEventListener('mouseleave', () => {
    isPanning = false;
    canvas.style.cursor = 'default';
});

// Actualizar unidad de tiempo
function updateTimeUnit() {
    timeUnit = timeUnitSelect.value;
    const unitLabels = {
        hours: "horas",
        days: "días",
        weeks: "semanas",
        months: "meses",
        years: "años"
    };
    totalUnitEl.textContent = unitLabels[timeUnit];
    slackUnitEl.textContent = unitLabels[timeUnit];
    if (tasks.length > 0) {
        renderTaskTable();
        drawNetworkDiagram();
        if (projectDuration > 0) {
            showDurationConversion(projectDuration);
        }
    }
}

// Renderizar checklist de dependencias
function renderDependenciesChecklist(currentTaskId = null) {
    dependenciesChecklist.innerHTML = '';

    if (tasks.length === 0) {
        dependenciesChecklist.innerHTML = '<p>No hay tareas disponibles</p>';
        return;
    }

    tasks.forEach(task => {
        if (task.id === currentTaskId) return;

        const label = document.createElement('label');
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.value = task.id;
        checkbox.id = `dep-${task.id}`;

        if (currentTaskId) {
            const currentTask = tasks.find(t => t.id === currentTaskId);
            if (currentTask && currentTask.dependencies.includes(task.id)) {
                checkbox.checked = true;
            }
        }

        label.appendChild(checkbox);
        label.appendChild(document.createTextNode(` ${task.id}`));
        dependenciesChecklist.appendChild(label);
    });
}

// Añadir o editar tarea
function addTask() {
    const name = taskNameInput.value.trim();
    const duration = parseInt(taskDurationInput.value);

    if (!name) {
        showError('Por favor ingresa un nombre válido para la tarea.');
        return;
    }

    if (tasks.some(task => task.id === name)) {
        showError('Ya existe una tarea con ese nombre. Usa un nombre único.');
        return;
    }

    if (isNaN(duration) || duration <= 0) {
        showError('Por favor ingresa una duración válida mayor a cero.');
        return;
    }

    // Obtener dependencias seleccionadas
    const checkboxes = dependenciesChecklist.querySelectorAll('input[type="checkbox"]:checked');
    const dependencies = Array.from(checkboxes).map(cb => cb.value);

    // Verificar dependencias cíclicas
    if (dependencies.includes(name)) {
        showError('Una tarea no puede depender de sí misma.');
        return;
    }

    if (editingTaskId !== null) {
        // Modo edición
        const taskIndex = tasks.findIndex(t => t.id === editingTaskId);
        if (taskIndex !== -1) {
            tasks[taskIndex] = {
                ...tasks[taskIndex],
                name,
                duration,
                dependencies
            };
        }
        editingTaskId = null;
        addTaskBtn.innerHTML = '<i class="fas fa-plus"></i> Agregar Tarea';
        addTaskBtn.classList.remove('btn-warning');
    } else {
        // Nueva tarea
        tasks.push({
            id: name,
            name,
            duration,
            dependencies,
            es: 0,
            ef: 0,
            ls: 0,
            lf: 0,
            slack: 0,
            isCritical: false
        });
    }

    renderTaskTable();
    renderDependenciesChecklist();
    resetForm();
}

// Mostrar mensaje de error
function showError(message) {
    // Crear o actualizar un elemento para mostrar el error
    let errorEl = document.querySelector('.error-message');
    if (!errorEl) {
        errorEl = document.createElement('div');
        errorEl.className = 'error-message';
        document.querySelector('.card').insertBefore(errorEl, document.querySelector('.actions'));
    }
    errorEl.textContent = message;
    setTimeout(() => {
        errorEl.style.opacity = '0';
        setTimeout(() => {
            errorEl.remove();
        }, 500);
    }, 3000);
}

// Limpiar formulario
function resetForm() {
    taskNameInput.value = '';
    taskDurationInput.value = '';
    taskNameInput.focus();
}

// Renderizar la tabla de tareas
function renderTaskTable() {
    tasksBody.innerHTML = '';
    tasks.forEach(task => {
        const row = document.createElement('tr');
        if (task.isCritical) {
            row.classList.add('critical-task');
        } else {
            row.classList.add('non-critical-task');
        }

        // Dependencias como string
        const dependenciesText = task.dependencies.join(', ');

        row.innerHTML = `
            <td>${task.id}</td>
            <td>${task.name}</td>
            <td>${task.duration}</td>
            <td>${dependenciesText}</td>
            <td>${task.es}</td>
            <td>${task.ef}</td>
            <td>${task.ls}</td>
            <td>${task.lf}</td>
            <td>${task.slack}</td>
            <td>${task.isCritical ? 'Sí' : 'No'}</td>
            <td class="action-buttons">
                <button class="btn-edit" data-id="${task.id}"><i class="fas fa-edit"></i></button>
                <button class="btn-delete" data-id="${task.id}"><i class="fas fa-trash"></i></button>
            </td>
        `;
        tasksBody.appendChild(row);
    });

    // Agregar event listeners a los botones de editar y eliminar
    document.querySelectorAll('.btn-edit').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const taskId = e.currentTarget.getAttribute('data-id');
            editTask(taskId);
        });
    });

    document.querySelectorAll('.btn-delete').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const taskId = e.currentTarget.getAttribute('data-id');
            deleteTask(taskId);
        });
    });
}

// Editar tarea
function editTask(taskId) {
    const task = tasks.find(t => t.id === taskId);
    if (task) {
        editingTaskId = taskId;
        taskNameInput.value = task.name;
        taskDurationInput.value = task.duration;
        renderDependenciesChecklist(taskId);
        addTaskBtn.innerHTML = '<i class="fas fa-save"></i> Guardar Cambios';
        addTaskBtn.classList.add('btn-warning');
        taskNameInput.focus();
    }
}

// Eliminar tarea
function deleteTask(taskId) {
    if (confirm('¿Estás seguro de eliminar esta tarea?')) {
        tasks = tasks.filter(task => task.id !== taskId);
        // Eliminar esta tarea de las dependencias de otras tareas
        tasks.forEach(task => {
            task.dependencies = task.dependencies.filter(dep => dep !== taskId);
        });
        renderTaskTable();
        renderDependenciesChecklist();
        if (editingTaskId === taskId) {
            resetForm();
            editingTaskId = null;
            addTaskBtn.innerHTML = '<i class="fas fa-plus"></i> Agregar Tarea';
            addTaskBtn.classList.remove('btn-warning');
        }
    }
}

// Reiniciar proyecto
function resetProject() {
    if (confirm('¿Estás seguro de reiniciar el proyecto? Se perderán todos los datos.')) {
        tasks = [];
        criticalPath = [];
        projectDuration = 0;
        editingTaskId = null;
        renderTaskTable();
        renderDependenciesChecklist();
        resetForm();
        totalDurationEl.textContent = '0';
        criticalTasksEl.textContent = '0';
        nonCriticalTasksEl.textContent = '0';
        minSlackEl.textContent = '0';
        criticalPathContainer.innerHTML = '';
        durationConversionEl.innerHTML = '';
        drawNetworkDiagram();
    }
}



// Detectar dependencias cíclicas (CORREGIDO)
function hasCyclicDependencies() {
    const visited = {};
    const recStack = {};
    const adjList = {};

    // Crear lista de adyacencia
    tasks.forEach(task => {
        visited[task.id] = false;
        recStack[task.id] = false;
        adjList[task.id] = task.dependencies;
    });

    for (const task of tasks) {
        if (visited[task.id] === false) {
            if (isCyclicUtil(task.id, visited, recStack, adjList)) {
                return true;
            }
        }
    }
    return false;
}

function isCyclicUtil(v, visited, recStack, adjList) {
    if (!visited[v]) {
        visited[v] = true;
        recStack[v] = true;

        const neighbors = adjList[v] || [];
        for (const neighbor of neighbors) {
            if (!visited[neighbor]) {
                if (isCyclicUtil(neighbor, visited, recStack, adjList)) {
                    return true;
                }
            } else if (recStack[neighbor]) {
                return true;
            }
        }
    }
    recStack[v] = false;
    return false;
}

// Identificar la ruta crítica
function identifyCriticalPath() {
    criticalPath = [];
    // Encontrar tareas críticas sin sucesores (o con sucesores no críticos) para empezar
    const criticalTasks = tasks.filter(task => task.isCritical);
    // Ordenar por EF descendente (las tareas al final del proyecto)
    criticalTasks.sort((a, b) => b.ef - a.ef);

    // Empezar por la tarea con mayor EF (final del proyecto)
    let currentTask = criticalTasks[0];
    criticalPath.push(currentTask);

    // Recorrer hacia atrás por dependencias críticas
    while (currentTask.dependencies.length > 0) {
        // Buscar una dependencia que sea crítica
        for (const depId of currentTask.dependencies) {
            const depTask = criticalTasks.find(t => t.id === depId);
            if (depTask && depTask.isCritical) {
                criticalPath.push(depTask);
                currentTask = depTask;
                break;
            }
        }
    }

    // Invertir para tener la ruta desde el inicio hasta el fin
    criticalPath.reverse();

    // Mostrar la ruta crítica
    criticalPathContainer.innerHTML = '';
    criticalPath.forEach((task, index) => {
        const node = document.createElement('span');
        node.className = 'path-node';
        node.innerHTML = `<i class="fas fa-tasks"></i> ${task.id}`;
        criticalPathContainer.appendChild(node);
        if (index < criticalPath.length - 1) {
            const arrow = document.createElement('span');
            arrow.className = 'path-arrow';
            arrow.innerHTML = '<i class="fas fa-arrow-right"></i>';
            criticalPathContainer.appendChild(arrow);
        }
    });
}

// Mostrar conversión de duración
function showDurationConversion(duration) {
    const conversions = {
        hours: {
            days: duration / 8,
            weeks: duration / 40,
            months: duration / 160,
            years: duration / 1920
        },
        days: {
            hours: duration * 8,
            weeks: duration / 5,
            months: duration / 20,
            years: duration / 240
        },
        weeks: {
            hours: duration * 40,
            days: duration * 5,
            months: duration / 4,
            years: duration / 48
        },
        months: {
            hours: duration * 160,
            days: duration * 20,
            weeks: duration * 4,
            years: duration / 12
        },
        years: {
            hours: duration * 1920,
            days: duration * 240,
            weeks: duration * 48,
            months: duration * 12
        }
    };

    let html = '';
    for (const unit in conversions[timeUnit]) {
        if (unit !== timeUnit) {
            const value = conversions[timeUnit][unit];
            const unitLabels = {
                hours: "horas",
                days: "días",
                weeks: "semanas",
                months: "meses",
                years: "años"
            };
            html += `<div>≈ ${value.toFixed(2)} ${unitLabels[unit]}</div>`;
        }
    }
    durationConversionEl.innerHTML = html;
}

// Dibujar diagrama de red (con zoom y desplazamiento)
function drawNetworkDiagram() {
    // Ajustar tamaño del canvas
    resizeCanvas();

    // Limpiar canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Si no hay tareas, mostrar mensaje
    if (tasks.length === 0) {
        ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
        ctx.font = '20px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('Agrega tareas para visualizar el diagrama', canvas.width / 2, canvas.height / 2);
        return;
    }

    // Configuración del diagrama
    const nodeRadius = 40;
    const horizontalSpacing = 150;
    const verticalSpacing = 100;

    // Organizar tareas en niveles (por ES)
    const levels = {};
    tasks.forEach(task => {
        if (!levels[task.es]) {
            levels[task.es] = [];
        }
        levels[task.es].push(task);
    });

    // Calcular posiciones
    const nodePositions = {};
    let maxNodesInLevel = 0;
    const levelKeys = Object.keys(levels).sort((a, b) => a - b);
    levelKeys.forEach((key, levelIndex) => {
        const levelTasks = levels[key];
        maxNodesInLevel = Math.max(maxNodesInLevel, levelTasks.length);
        levelTasks.forEach((task, taskIndex) => {
            const x = 100 + levelIndex * horizontalSpacing;
            const y = 100 + taskIndex * verticalSpacing;
            nodePositions[task.id] = { x, y, task };
        });
    });

    // Aplicar transformaciones de zoom y desplazamiento
    ctx.save();
    ctx.translate(panOffset.x, panOffset.y);
    ctx.scale(zoomLevel, zoomLevel);

    // Dibujar conexiones
    tasks.forEach(task => {
        task.dependencies.forEach(depId => {
            const depTask = tasks.find(t => t.id === depId);
            if (depTask && nodePositions[task.id] && nodePositions[depId]) {
                const startX = nodePositions[depId].x;
                const startY = nodePositions[depId].y;
                const endX = nodePositions[task.id].x;
                const endY = nodePositions[task.id].y;

                ctx.beginPath();
                ctx.moveTo(startX, startY);
                ctx.lineTo(endX, endY);
                ctx.strokeStyle = task.isCritical && depTask.isCritical ? '#e74c3c' : '#3498db';
                ctx.lineWidth = task.isCritical && depTask.isCritical ? 3 : 1;
                ctx.stroke();

                // Flecha
                const angle = Math.atan2(endY - startY, endX - startX);
                const arrowLength = 10;
                ctx.beginPath();
                ctx.moveTo(endX, endY);
                ctx.lineTo(
                    endX - arrowLength * Math.cos(angle - Math.PI / 6),
                    endY - arrowLength * Math.sin(angle - Math.PI / 6)
                );
                ctx.lineTo(
                    endX - arrowLength * Math.cos(angle + Math.PI / 6),
                    endY - arrowLength * Math.sin(angle + Math.PI / 6)
                );
                ctx.closePath();
                ctx.fillStyle = task.isCritical && depTask.isCritical ? '#e74c3c' : '#3498db';
                ctx.fill();
            }
        });
    });

    // Dibujar nodos
    for (const id in nodePositions) {
        const { x, y, task } = nodePositions[id];
        ctx.beginPath();
        ctx.arc(x, y, nodeRadius, 0, Math.PI * 2);
        ctx.fillStyle = task.isCritical ? 'rgba(231, 76, 60, 0.8)' : 'rgba(46, 204, 113, 0.8)';
        ctx.fill();
        ctx.strokeStyle = 'white';
        ctx.lineWidth = 2;
        ctx.stroke();

        // Texto
        ctx.fillStyle = 'white';
        ctx.font = 'bold 16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(task.id, x, y - 10);
        ctx.font = '14px Arial';
        ctx.fillText(`Duración: ${task.duration}`, x, y + 10);
    }

    ctx.restore();

    // Dibujar controles de zoom
    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
    ctx.fillRect(10, 10, 120, 40);
    ctx.fillStyle = 'white';
    ctx.font = '14px Arial';
    ctx.fillText(`Zoom: ${Math.round(zoomLevel * 100)}%`, 20, 30);
}

// Ajustar tamaño del canvas
function resizeCanvas() {
    const container = canvas.parentElement;
    canvas.width = container.clientWidth;
    canvas.height = container.clientHeight;
}

// Inicialización
function init() {
    renderDependenciesChecklist();
    renderTaskTable();
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    drawNetworkDiagram();
}

init();